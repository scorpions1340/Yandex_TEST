import requests
import json
import time

# –ë–∞–∑–æ–≤—ã–π URL API
BASE_URL = "http://localhost:8000"

def test_register():
    """–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        data = {
            "username": "testuser",
            "email": "test@example.com",
            "password": "testpass123"
        }
        response = requests.post(f"{BASE_URL}/auth/register", json=data)
        print(f"Register: {response.status_code}")
        if response.status_code == 201:
            print(f"User registered: {response.json()}")
        else:
            print(f"Error: {response.json()}")
        return response.status_code == 201
    except Exception as e:
        print(f"Register failed: {e}")
        return False

def test_login():
    """–¢–µ—Å—Ç –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        data = {
            "username": "testuser",
            "password": "testpass123"
        }
        response = requests.post(f"{BASE_URL}/auth/login", data=data)
        print(f"Login: {response.status_code}")
        if response.status_code == 200:
            token_data = response.json()
            print(f"Token received: {token_data['access_token'][:20]}...")
            return token_data['access_token']
        else:
            print(f"Error: {response.json()}")
            return None
    except Exception as e:
        print(f"Login failed: {e}")
        return None

def test_me(token):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    try:
        headers = {"Authorization": f"Bearer {token}"}
        response = requests.get(f"{BASE_URL}/auth/me", headers=headers)
        print(f"Me: {response.status_code}")
        print(f"User info: {response.json()}")
        return response.status_code == 200
    except Exception as e:
        print(f"Me failed: {e}")
        return False

def test_classify_without_token():
    """–¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ (–¥–æ–ª–∂–µ–Ω –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –æ—à–∏–±–∫–æ–π)"""
    try:
        data = {"text": "This is a test"}
        response = requests.post(f"{BASE_URL}/api/classify", json=data)
        print(f"Classify without token: {response.status_code}")
        if response.status_code == 403:
            print("‚úÖ Correctly rejected without token")
            return True
        else:
            print("‚ùå Should have been rejected without token")
            return False
    except Exception as e:
        print(f"Classify without token failed: {e}")
        return False

def test_classify_with_token(token):
    """–¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å —Ç–æ–∫–µ–Ω–æ–º"""
    try:
        headers = {"Authorization": f"Bearer {token}"}
        data = {"text": "This is a wonderful product!"}
        response = requests.post(f"{BASE_URL}/api/classify", json=data, headers=headers)
        print(f"Classify with token: {response.status_code}")
        print(f"Result: {response.json()}")
        return response.status_code == 200
    except Exception as e:
        print(f"Classify with token failed: {e}")
        return False

def test_batch_classify_with_token(token):
    """–¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å —Ç–æ–∫–µ–Ω–æ–º"""
    try:
        headers = {"Authorization": f"Bearer {token}"}
        data = {
            "texts": [
                "Great product!",
                "Terrible service",
                "It's okay"
            ]
        }
        response = requests.post(f"{BASE_URL}/api/classify-batch", json=data, headers=headers)
        print(f"Batch classify with token: {response.status_code}")
        result = response.json()
        print(f"Total processed: {result.get('total')}")
        return response.status_code == 200
    except Exception as e:
        print(f"Batch classify with token failed: {e}")
        return False

def test_health():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è API (–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ —Ç–æ–∫–µ–Ω–∞)"""
    try:
        response = requests.get(f"{BASE_URL}/api/health")
        print(f"Health check: {response.status_code}")
        print(f"Response: {response.json()}")
        return response.status_code == 200
    except Exception as e:
        print(f"Health check failed: {e}")
        return False

def test_model_info():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏ (–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ —Ç–æ–∫–µ–Ω–∞)"""
    try:
        response = requests.get(f"{BASE_URL}/api/model-info")
        print(f"Model info: {response.status_code}")
        print(f"Response: {response.json()}")
        return response.status_code == 200
    except Exception as e:
        print(f"Model info failed: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π...")
    print("-" * 50)
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    print("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    time.sleep(5)
    
    # –¢–µ—Å—Ç—ã –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    print("\n--- –¢–µ—Å—Ç—ã –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ ---")
    health_ok = test_health()
    model_info_ok = test_model_info()
    classify_no_token_ok = test_classify_without_token()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –≤—Ö–æ–¥
    print("\n--- –¢–µ—Å—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ ---")
    register_ok = test_register()
    token = test_login()
    
    if token:
        me_ok = test_me(token)
        
        # –¢–µ—Å—Ç—ã —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
        print("\n--- –¢–µ—Å—Ç—ã —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π ---")
        classify_ok = test_classify_with_token(token)
        batch_ok = test_batch_classify_with_token(token)
        
        # –ò—Ç–æ–≥–∏
        print("\n" + "=" * 50)
        print("–ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"Health Check: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if health_ok else '‚ùå –û—à–∏–±–∫–∞'}")
        print(f"Model Info: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if model_info_ok else '‚ùå –û—à–∏–±–∫–∞'}")
        print(f"Classify without token: {'‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ' if classify_no_token_ok else '‚ùå –û—à–∏–±–∫–∞'}")
        print(f"Register: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if register_ok else '‚ùå –û—à–∏–±–∫–∞'}")
        print(f"Login: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if token else '‚ùå –û—à–∏–±–∫–∞'}")
        print(f"Get User Info: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if me_ok else '‚ùå –û—à–∏–±–∫–∞'}")
        print(f"Classify with token: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if classify_ok else '‚ùå –û—à–∏–±–∫–∞'}")
        print(f"Batch Classify: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if batch_ok else '‚ùå –û—à–∏–±–∫–∞'}")
        
        all_passed = all([
            health_ok, 
            model_info_ok, 
            classify_no_token_ok, 
            register_ok, 
            bool(token), 
            me_ok, 
            classify_ok, 
            batch_ok
        ])
        
        print(f"\n–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã' if all_passed else '‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã'}")
        
        if all_passed:
            print("\nüéâ API —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
            print(f"–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API: {BASE_URL}/docs")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω, —Ç–µ—Å—Ç—ã —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –ø—Ä–æ–ø—É—â–µ–Ω—ã")

if __name__ == "__main__":
    main()